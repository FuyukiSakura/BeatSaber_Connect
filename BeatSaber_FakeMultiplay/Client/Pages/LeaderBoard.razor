@page "/LeaderBoard"
@layout EmptyLayout
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@using BeatSaber_FakeMultiplay.Shared.Models.Event
@using BeatSaber_FakeMultiplay.Shared.Models.Socket
@inject NavigationManager _navigationManager
@implements IAsyncDisposable

<PageTitle>ScoreBoard</PageTitle>

<div id="scoreBoard">
    @if (_leaderBoard != null)
    {
        foreach (var (playerName, gameStatus) in _leaderBoard)
        {
            <div class="card text-white sakura-mp mb-3">
                <div class="card-header sakura-mp-player">@playerName</div>
                <div class="card-body">
                    <h5 class="card-title sakura-mp-acc">@gameStatus.Rank (@((gameStatus.RelativeScore * 100).ToString("0.00"))%)</h5>
                    <p class="card-text sakura-mp-score">@gameStatus.Score</p>
                </div>
            </div>
        }
    }
</div>

@code {
    private HubConnection? _hubConnection;
    private readonly Dictionary<string, Performance> _playerStatusList = new();
    private IOrderedEnumerable<KeyValuePair<string, Performance>>? _leaderBoard;

    ///
    /// <inheritdoc />
    ///
    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(_navigationManager.ToAbsoluteUri(SocketUri.Lobby))
            .Build();

        _hubConnection.On<string, string>(BsHubMessage.ScoreUpdate, PlayerStatus_OnUpdated);

        await _hubConnection.StartAsync();
    }

    /// <summary>
    /// Handles player status update
    /// </summary>
    /// <param name="playerName"></param>
    /// <param name="httpStatusJson"></param>
    /// <exception cref="NotImplementedException"></exception>
    void PlayerStatus_OnUpdated(string playerName, string httpStatusJson)
    {
        var socketEvent = JsonSerializer.Deserialize<Performance>(httpStatusJson);
        if (socketEvent == null) return; // Cannot determine result

        _playerStatusList[playerName] = socketEvent;
        _leaderBoard = _playerStatusList.OrderByDescending(pair => pair.Value.Score);
        StateHasChanged();
    }

    /// <summary>
    /// Checks if the client is connected
    /// </summary>
    public bool IsConnected =>
        _hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}
