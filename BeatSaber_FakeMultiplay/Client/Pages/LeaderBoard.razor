@page "/leader-board"
@page "/leader-board/{RoomId}"
@layout EmptyLayout
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@using BeatSaber_FakeMultiplay.Client.Services.BeatSaber
@using BeatSaber_FakeMultiplay.Shared.Models.BeatSaber
@using BeatSaber_FakeMultiplay.Shared.Models.Hosting
@using BeatSaber_FakeMultiplay.Shared.Models.Socket
@inject BeatSaberSocketResolver _bsSocketResolver
@implements IAsyncDisposable

<PageTitle>ScoreBoard</PageTitle>

<div id="scoreBoard">
    @if (_leaderBoard != null)
    {
        <div class="card text-white sakura-mp mb-3" style="max-width: 500px">
            <div class="card-header sakura-mp-player">@_beatMapInfo.SongName</div>
            <div class="card-body">                
                <ul class="list-group list-group-flush">
                    <li style="display: none">@(_rank = 1)</li>
                    @foreach (var (playerName, gameStatus) in _leaderBoard)
                    {
                        <li style="display: block">
                            <span class="sakura-mp-rank">#@(_rank++)  </span>
                            <span class="sakura-mp-player">@playerName</span>
                            <span class="sakura-mp-score">@($"{gameStatus.Score:#,0}")</span>
                            <span class="sakura-mp-acc">@gameStatus.Rank (@(gameStatus.Accuracy.ToString("0.00"))%)</span>
                        </li>
                    }
                </ul>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string RoomId { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery(Name = "playerName")]
    public string PlayerName { get; set; } = "";

    private HubConnection? _hubConnection;
    private BeatMapInfo _beatMapInfo = new ();
    private int _rank = 1;
    private readonly Dictionary<string, PlayerStats> _playerStatusList = new();
    private IOrderedEnumerable<KeyValuePair<string, PlayerStats>>? _leaderBoard;

    ///
    /// <inheritdoc />
    ///
    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Uris.Hub + SocketUri.Lobby)
            .Build();

        _hubConnection.Closed += HubConnectionOnClosed;
        _hubConnection.On<string, string>(BsHubMessage.ScoreUpdate, PlayerStatus_OnUpdated);

        await _hubConnection.StartAsync();

        await _hubConnection.SendAsync("Subscribe", RoomId);
        _ = Join(_hubConnection);
    }

    /// <summary>
    /// Tries to reconnect when the connection is closed
    /// </summary>
    /// <param name="arg"></param>
    /// <returns></returns>
    async Task HubConnectionOnClosed(Exception? arg)
    {
        while (_hubConnection!.State != HubConnectionState.Connected)
        {
            await _hubConnection.StartAsync();
            await Task.Delay(2000);
        }
    }

    /// <summary>
    /// Joins user to the room and starts sending score
    /// </summary>
    /// <returns></returns>
    private async Task Join(HubConnection connection)
    {
        while (true)
        {
            var bsSocket = await _bsSocketResolver.ResolveAsync();
            if (bsSocket == null)
            {
                // None of the sockets supported can connect
                await Task.Delay(5000);
                continue;
            }

            bsSocket.Stop();
            await bsSocket.StartAsync();
            bsSocket.ScoreChanged += BsSocket_OnScoreChanged;
            bsSocket.SongStart += BsSocket_OnSongStart;

            await connection.SendAsync("JoinRoom", PlayerName, RoomId);
            break;
        }
    }

    /// <summary>
    /// Handles http-status on song start event
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    async void BsSocket_OnScoreChanged(object? sender, PlayerStats e)
    {
        await _hubConnection!.SendAsync("ScoreUpdate", PlayerName, RoomId, JsonSerializer.Serialize(e));
    }

    /// <summary>
    /// Handles http-status on score changed event
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    void BsSocket_OnSongStart(object? sender, BeatMapInfo? e)
    {
        if (e != null)
        {
            _beatMapInfo = e;
        }
        _playerStatusList.Clear();
        StateHasChanged();
    }

    /// <summary>
    /// Handles player status update
    /// </summary>
    /// <param name="playerName"></param>
    /// <param name="httpStatusJson"></param>
    /// <exception cref="NotImplementedException"></exception>
    void PlayerStatus_OnUpdated(string playerName, string httpStatusJson)
    {
        var playerStats = JsonSerializer.Deserialize<PlayerStats>(httpStatusJson);
        if (playerStats == null) return; // Cannot determine result

        _playerStatusList[playerName] = playerStats;
        _leaderBoard = _playerStatusList.OrderByDescending(pair => pair.Value.Score);
        StateHasChanged();
    }

    /// <summary>
    /// Checks if the client is connected
    /// </summary>
    public bool IsConnected =>
        _hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}
