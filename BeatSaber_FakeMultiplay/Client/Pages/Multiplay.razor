@page "/multiplay"
@page "/multiplay/{RoomId}"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@using BeatSaber_FakeMultiplay.Client.ResourceFiles.Lobby
@using BeatSaber_FakeMultiplay.Client.ResourceFiles.Shared
@using BeatSaber_FakeMultiplay.Client.Services.BeatSaber
@using BeatSaber_FakeMultiplay.Shared.Models.BeatSaber
@using BeatSaber_FakeMultiplay.Shared.Models.Socket
@using Microsoft.Extensions.Localization
@inject BeatSaberSocketResolver _bsSocketResolver
@inject NavigationManager _navigationManager
@inject IStringLocalizer<LobbyResource> _localizer
@inject IStringLocalizer<SharedResource> _sharedLocalizer
@inject IJSRuntime _jsRuntime
@implements IAsyncDisposable

<PageTitle>@_sharedLocalizer[nameof(SharedResource.NavLobbyText)] - @_sharedLocalizer[nameof(SharedResource.AppTitle)]</PageTitle>

<div class="container">

    @if (!string.IsNullOrWhiteSpace(_errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @((MarkupString) _errorMessage)
        </div>

        <div class="alert alert-info" role="alert">
            @((MarkupString) string.Format(_localizer[nameof(LobbyResource.HttpStatusConnectionFailText)],
                "<a href=\"https://github.com/opl-/beatsaber-http-status/releases\">http-status</a>",
                "<a href=\"https://github.com/denpadokei/HttpSiraStatus/releases\">HttpSiraStatus</a>",
                "<a href=\"https://github.com/ReadieFur/BSDataPuller/\">DataPuller</a>"))
        </div>
    }

    @if (string.IsNullOrWhiteSpace(RoomId))
    {
        <div class="form-group">
            <label for="inputRoomName">@_localizer[nameof(LobbyResource.RoomNameLabelText)]</label>
            <input type="text" class="form-control" id="inputRoomName" placeholder="Choose a name" @bind="_preferredRoomId">
            <small id="roomHelp" class="form-text text-muted">@_localizer[nameof(LobbyResource.RoomNameHintText)]</small>
        </div>
        <button class="btn btn-secondary" @onclick="GoToRoom">@_localizer[nameof(LobbyResource.CreateRoomButtonText)]</button>
    }
    else
    {
        <!-- Connect to server -->
        <div class="form-group">
            <label for="inputDisplayName">@_localizer[nameof(LobbyResource.PlayerNameLabelText)]</label>
            <input type="text" class="form-control" id="inputDisplayName" placeholder="冬雪桜" @bind="_playerName">
            <small id="playerNameHelp" class="form-text text-muted">@_localizer[nameof(LobbyResource.PlayerNameHintText)]</small>
        </div>
        <button class="btn btn-primary mb-3" @onclick="Join" disabled="@(!IsConnected)">@_localizer[nameof(LobbyResource.JoinButtonText)]</button>

        <!-- Lobby info -->
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text">@_localizer[nameof(LobbyResource.LobbyUrlLabelText)]</span>
            </div>
            <input type="text"
                   class="form-control"
                   aria-describedby="lobby-url"
                   onfocus="this.select()"
                   @bind="_roomUrl" readonly />
            <div class="input-group-append">
                <button class="btn btn-outline-secondary" @onclick="ShareRoom">
                    @_localizer[nameof(LobbyResource.ShareRoomButtonText)]
                </button>
            </div>
        </div>
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text">@_localizer[nameof(LobbyResource.OverlayUrlLabelText)]</span>
            </div>
            <input type="text"
                   class="form-control"
                   aria-describedby="overlay-url"
                   onfocus="this.select()"
                   @bind="_overlayUrl" readonly />
            <div class="input-group-append">
                <button class="btn btn-outline-secondary" @onclick="CopyOverlayLink">
                    @_localizer[nameof(LobbyResource.CopyOverlayLinkButtonText)]
                </button>
            </div>
        </div>

        <hr>

        <!-- Lobby messages -->
        <ul id="messagesList">
            @foreach (var message in _messages)
            {
                <li>@message</li>
            }
        </ul>

        <hr>

        <!-- Score display -->
        <ul id="scoreBoard">
            @if (_leaderBoard != null)
            {
                foreach (var (playerName, gameStatus) in _leaderBoard)
                {
                    <li>@playerName : @gameStatus.Score (@(gameStatus.Accuracy.ToString("0.00"))%) | (@gameStatus.Rank)</li>
                }
            }
        </ul>
    }

</div>

@code {
    [Parameter]
    public string RoomId { get; set; } = "";

    private HubConnection? _hubConnection;

    private readonly List<string> _messages = new();
    private string _errorMessage = "";
    private string _roomUrl = "";
    private string _overlayUrl = "";

    private readonly Dictionary<string, PlayerStats> _playerStatusList = new();
    private IOrderedEnumerable<KeyValuePair<string, PlayerStats>>? _leaderBoard;
    private string _preferredRoomId = "";
    private string _playerName = "";

    ///
    /// <inheritdoc />
    ///
    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(_navigationManager.ToAbsoluteUri(SocketUri.Lobby))
            .WithAutomaticReconnect()             
            .Build();

        _hubConnection.On<string>(BsHubMessage.JoinRoom, (user) =>
        {
            var encodedMsg = user + _localizer[LobbyResource.UserEnterRoomMessage];
            _messages.Add(encodedMsg);
            StateHasChanged();
        });

        _hubConnection.On<string, string>(BsHubMessage.ScoreUpdate, PlayerStatus_OnUpdated);

        await _hubConnection.StartAsync();
    }

    ///
    /// <inheritdoc />
    ///
    protected override void OnParametersSet()
    {
        _roomUrl = _navigationManager.Uri;
        _overlayUrl = $"{_navigationManager.BaseUri}LeaderBoard/{RoomId}";

        base.OnParametersSet();
    }

    /// <summary>
    /// Handles player status update
    /// </summary>
    /// <param name="playerName"></param>
    /// <param name="httpStatusJson"></param>
    /// <exception cref="NotImplementedException"></exception>
    void PlayerStatus_OnUpdated(string playerName, string httpStatusJson)
    {
        var playerStats = JsonSerializer.Deserialize<PlayerStats>(httpStatusJson);
        if (playerStats == null) return; // Cannot determine result

        _playerStatusList[playerName] = playerStats;
        _leaderBoard = _playerStatusList.OrderByDescending(pair => pair.Value.Score);
        StateHasChanged();
    }

    /// <summary>
    /// Navigates user to the new room
    /// </summary>
    /// <returns></returns>
    private void GoToRoom()
    {
        _navigationManager.NavigateTo($"{_navigationManager.Uri}/{_preferredRoomId}");
    }

    /// <summary>
    /// Joins user to the room
    /// </summary>
    /// <returns></returns>
    private async Task Join()
    {
        if (_hubConnection is null) return; // WebSocket connection not established yet
        _errorMessage = ""; // Resets the error message

        var bsSocket = await _bsSocketResolver.ResolveAsync();
        if (bsSocket == null)
        {
            // None of the sockets supported can connect
            _errorMessage = _localizer[nameof(LobbyResource.BeatSaberNotRunningMessage)];
            return;
        }

        bsSocket.Stop();
        await bsSocket.StartAsync();
        bsSocket.ScoreChanged += HttpStatusSocket_OnScoreChanged;
        bsSocket.SongStart += HttpStatusSocket_OnSongStart;
        await _hubConnection.SendAsync("JoinRoom", _playerName, RoomId);
    }

    /// <summary>
    /// Handles http-status on song start event
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    async void HttpStatusSocket_OnScoreChanged(object? sender, PlayerStats e)
    {
        await _hubConnection!.SendAsync("ScoreUpdate", _playerName, RoomId, JsonSerializer.Serialize(e));
    }

    /// <summary>
    /// Handles http-status on score changed event
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    async void HttpStatusSocket_OnSongStart(object? sender, BeatMapInfo e)
    {
        await _hubConnection!.SendAsync("SongStart", RoomId);
    }

    /// <summary>
    /// Copies the monitor page link to clipboard
    /// </summary>
    /// <returns></returns>
    private async Task CopyOverlayLink()
    {
        await _jsRuntime.InvokeVoidAsync("clipboardCopy.copyText", _overlayUrl);
    }

    /// <summary>
    /// Copies the monitor page link to clipboard
    /// </summary>
    /// <returns></returns>
    private async Task ShareRoom()
    {
        await _jsRuntime.InvokeVoidAsync("clipboardCopy.copyText", _roomUrl);
    }

    /// <summary>
    /// Checks if the client is connected
    /// </summary>
    public bool IsConnected =>
        _hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}
